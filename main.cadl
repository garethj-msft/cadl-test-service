// TODO List:
// addressUrl/MSAaddressURL
// some extension mechanism so we can have a fast lifecycle
// Bulk /deep write supported on individual
// Filter
// Property,Type and op documentation
// lifecycle (implementation | experimental | privatePreview | publicPreview | releaseCandidate* | public | privileged | deprecated )
// deprecation details.
// serviceContainer
//       bindingPaths

import "@cadl-lang/compiler";
import "@cadl-lang/rest";
import "@cadl-lang/msgraph";
import "@msgraph/oneDrive";

using Cadl.Http;
using Cadl.MsGraph;
    
@serviceTitle("Pet Store Service")
@serviceVersion("2021-03-25")
namespace microsoft.graph.petStore {

    // Import type for reuse without modification
    @importModel("@workload-oneDrive") model identity {
    }

    // Import type for reuse with mapping to internal names
    @importModel model identitySet {
        @workloadName("internalUser") user: identity ;
        device: identity;
        application: identity;
    }

    model kennelClub extends microsoft.graph.group {
    }

    model category {
      @serverGenerated @id id: string;
      displayName: string;
      @serverGenerated petCount: int32;
    }

    model tag {
      displayName: string;
    }

    enum petStatus {
        @value(0) available,
        @value(1) pending,
        @value(2) sold,
        @value(3) unknownFutureValue,
    }

    model outfit {
        @serverGenerated @id id: string;
        @required displayName: string;
        cutenessLevel: int32;
    }

    model pet { 
        @serverGenerated @id id: string;
        @required displayName: string; 
        photoUrls: string[];
        tags: tag[];
        @required @immutable breed: string;  // Can only be set on create
        status: petStatus;
        @writeOnly password: string; 
        owner: identitySet;
        @relation outfits: outfit[];
        @refRelation category: category;

        @relation outfits: outfit[];
        @refRelation category: category;
        @pointerRelation category: category;
        @pointerRelation @supportsRefs category2: category;

    }

    @service
    model petService {
        pets: pet[];
        bestPet: pet;
        categories: category[];
        // TODO: Navigation bindings
    }

// Alternative 1
    @route("/pets")
    interface pets
    {
        create(body: pet): TCreatedResponse<pet>;
        @skip @top @count @expand("categories", "outfits") list(testParam: int32): OkResponse<PagedList<pet>>;
        patch(changes: pet[]): NoContentResponse;
        @post makeAllThePetsPoster(): OkResponse<stream>;
    }

    @route("/pets/{id}")
    interface petsById
    {
        get(id: string): GetByIdResponse<pet>;
        // get(id: string): OkResponse<pet> | NotFoundResponse;
        patch(id: string, change: pet): NoContentResponse | NotFoundResponse;
        delete(id: string): NoContentResponse | NotFoundResponse;
        @action sendCutePostcard(id: string, greeting: string): NoContentResponse | NotFoundResponse;
    }

// Alternative2
    @route("/pets2")
    interface pets2
    {
        create(body: pet): TCreatedResponse<pet>;
        @skip @top @count @expand("categories", "outfits") list(testParam: int32): OkResponse<PagedList<pet>>;
        patch(changes: pet[]): NoContentResponse;
        @function getAllThePetsPoster(binding: pets[]): OkResponse<stream>;
        @route("/pets2/{id}")
        get(id: string): OkResponse<pet> | NotFoundResponse;
        @route("/pets2/{id}")
        delete(id: string): NoContentResponse | NotFoundResponse;
        @route("/pets2/{id}")
        @patch patchById(id: string, change: pet): NoContentResponse | NotFoundResponse;
    }

    @route("/pets/{id}/outfits")
    interface petsByIdOutfits
    {
        post() : TCreatedResponse<outfit>;
        @orderBy("displayName") get(id: string): OkResponse<List<outfit>>;
    }

    @route("/pets/{petId}/outfits/{outfitId}")
    interface petsByIdOutfitsById
    {
        get(petId: string, outfitId: string): OkResponse<outfit> | NotFoundResponse;
        delete(petId: string, outfitId: string): NoContentResponse | NotFoundResponse;
        patch(petId: string, outfitId: string, changes: outfit): NoContentResponse | NotFoundResponse;
    }

    @route("/pets/{id}/category")
    interface petsByIdCategory
    {
        get(id: string): OkResponse<category> | NotFoundResponse;
        put(id: string, category: Ref<category>): NoContentResponse | NotFoundResponse;
    }

    @route("/pets/{id}/category/$ref")
    interface petsByIdCategoryRef
    {
        get(id: string): OkResponse<Ref<category>> | NotFoundResponse;
        delete(id: string): NoContentResponse | NotFoundResponse;
    }
    
    @route("/categories")
    interface categories {
        post(body: category): TCreatedResponse<category>;
        get(): OkResponse<List<category>>;
    }

    @route("/categories/{id}")
    interface categoriesById {
        get(id: string): OkResponse<category> | NotFoundResponse;
        delete(id: string): NoContentResponse | NotFoundResponse;
        update(id: string, changes: category): NoContentResponse | NotFoundResponse;
    }
}

namespace microsoft.graph {

    // Add properties to existing types
    @partial model user {
        @relation pets: microsoft.graph.petStore.pet[];
    }

    // Reference external type for extending
    @external model group {
    }
}
